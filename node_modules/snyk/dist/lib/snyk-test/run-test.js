"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _ = require("lodash");
var fs = require("then-fs");
var pathUtil = require("path");
var moduleToObject = require("snyk-module");
var depGraphLib = require("@snyk/dep-graph");
var analytics = require("../analytics");
var config = require("../config");
var detect = require("../../lib/detect");
var plugins = require("../plugins");
var ModuleInfo = require("../module-info");
var isCI = require("../is-ci");
var request = require("../request");
var snyk = require("../");
var spinner = require("../spinner");
var common = require("./common");
var gemfileLockToDependencies = require("../../lib/plugins/rubygems/gemfile-lock-to-dependencies");
var legacy_1 = require("./legacy");
// tslint:disable-next-line:no-var-requires
var debug = require('debug')('snyk');
function runTest(packageManager, root, options) {
    return __awaiter(this, void 0, void 0, function () {
        var policyLocations, hasDevDependencies, spinnerLbl, payload, filesystemPolicy, depGraph, dockerfilePackages_1, res_1, policy, seen_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    policyLocations = [options['policy-path'] || root];
                    hasDevDependencies = false;
                    spinnerLbl = 'Querying vulnerabilities database...';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 7, 8]);
                    return [4 /*yield*/, assemblePayload(root, options, policyLocations)];
                case 2:
                    payload = _a.sent();
                    filesystemPolicy = payload.body && !!payload.body.policy;
                    depGraph = payload.body && payload.body.depGraph;
                    if (payload.body && payload.body.docker && payload.body.docker.dockerfilePackages) {
                        dockerfilePackages_1 = payload.body.docker.dockerfilePackages;
                    }
                    return [4 /*yield*/, spinner(spinnerLbl)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, sendPayload(payload, hasDevDependencies)];
                case 4:
                    res_1 = _a.sent();
                    if (depGraph) {
                        res_1 = legacy_1.convertTestDepGraphResultToLegacy(res_1, depGraph, packageManager, options.severityThreshold);
                    }
                    analytics.add('vulns-pre-policy', res_1.vulnerabilities.length);
                    res_1.filesystemPolicy = filesystemPolicy;
                    if (!!options['ignore-policy']) return [3 /*break*/, 6];
                    return [4 /*yield*/, snyk.policy.loadFromText(res_1.policy)];
                case 5:
                    policy = _a.sent();
                    res_1 = policy.filter(res_1, root);
                    _a.label = 6;
                case 6:
                    analytics.add('vulns', res_1.vulnerabilities.length);
                    // add the unique count of vulnerabilities found
                    res_1.uniqueCount = 0;
                    seen_1 = {};
                    res_1.uniqueCount = res_1.vulnerabilities.reduce(function (acc, curr) {
                        if (!seen_1[curr.id]) {
                            seen_1[curr.id] = true;
                            acc++;
                        }
                        return acc;
                    }, 0);
                    if (res_1.docker && dockerfilePackages_1) {
                        res_1.vulnerabilities = res_1.vulnerabilities.map(function (vuln) {
                            var dockerfilePackage = dockerfilePackages_1[vuln.name.split('/')[0]];
                            if (dockerfilePackage) {
                                vuln.dockerfileInstruction = dockerfilePackage.instruction;
                            }
                            vuln.dockerBaseImage = res_1.docker.baseImage;
                            return vuln;
                        });
                    }
                    return [2 /*return*/, res_1];
                case 7:
                    spinner.clear(spinnerLbl)();
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    });
}
function sendPayload(payload, hasDevDependencies) {
    var filesystemPolicy = payload.body && !!payload.body.policy;
    return new Promise(function (resolve, reject) {
        request(payload, function (error, res, body) {
            if (error) {
                return reject(error);
            }
            if (res.statusCode !== 200) {
                var err = new Error(body && body.error ?
                    body.error :
                    res.statusCode);
                err.userMessage = body && body.userMessage;
                // this is the case where a local module has been tested, but
                // doesn't have any production deps, but we've noted that they
                // have dep deps, so we'll error with a more useful message
                if (res.statusCode === 404 && hasDevDependencies) {
                    err.code = 'NOT_FOUND_HAS_DEV_DEPS';
                }
                else {
                    err.code = res.statusCode;
                }
                if (res.statusCode === 500) {
                    debug('Server error', body.stack);
                }
                return reject(err);
            }
            body.filesystemPolicy = filesystemPolicy;
            resolve(body);
        });
    });
}
function assemblePayload(root, options, policyLocations) {
    var isLocal;
    if (options.docker) {
        isLocal = true;
        policyLocations = policyLocations.filter(function (loc) {
            return loc !== root;
        });
    }
    else {
        isLocal = fs.existsSync(root);
    }
    analytics.add('local', isLocal);
    if (isLocal) {
        return assembleLocalPayload(root, options, policyLocations);
    }
    return assembleRemotePayload(root, options);
}
function assembleLocalPayload(root, options, policyLocations) {
    return __awaiter(this, void 0, void 0, function () {
        var plugin, moduleInfo, analysisType, spinnerLbl, inspectRes, pkg, baseImageFromDockerfile, gemfileLockBase64, gemfileLockContents, depGraph, policy, err_1, payload;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    options.file = options.file || detect.detectPackageFile(root);
                    plugin = plugins.loadPlugin(options.packageManager, options);
                    moduleInfo = ModuleInfo(plugin, options.policy);
                    analysisType = options.docker ? 'docker' : options.packageManager;
                    spinnerLbl = 'Analyzing ' + analysisType + ' dependencies for ' +
                        pathUtil.relative('.', pathUtil.join(root, options.file || ''));
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 9, 10]);
                    return [4 /*yield*/, spinner(spinnerLbl)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, moduleInfo.inspect(root, options.file, options)];
                case 3:
                    inspectRes = _a.sent();
                    pkg = inspectRes.package;
                    if (_.get(inspectRes, 'plugin.packageManager')) {
                        options.packageManager = inspectRes.plugin.packageManager;
                    }
                    baseImageFromDockerfile = _.get(pkg, 'docker.baseImage');
                    if (!baseImageFromDockerfile && options['base-image']) {
                        pkg.docker = pkg.docker || {};
                        pkg.docker.baseImage = options['base-image'];
                    }
                    if (baseImageFromDockerfile && inspectRes.plugin.imageLayers) {
                        analytics.add('BaseImage', baseImageFromDockerfile);
                        analytics.add('imageLayers', inspectRes.plugin.imageLayers);
                    }
                    if (_.get(pkg, 'files.gemfileLock.contents')) {
                        gemfileLockBase64 = pkg.files.gemfileLock.contents;
                        gemfileLockContents = Buffer.from(gemfileLockBase64, 'base64').toString();
                        pkg.dependencies = gemfileLockToDependencies(gemfileLockContents);
                    }
                    return [4 /*yield*/, depGraphLib.legacy.depTreeToGraph(pkg, options.packageManager)];
                case 4:
                    depGraph = _a.sent();
                    analytics.add('policies', policyLocations.length);
                    analytics.add('packageManager', options.packageManager);
                    analytics.add('packageName', pkg.name);
                    analytics.add('packageVersion', pkg.version);
                    analytics.add('package', pkg.name + '@' + pkg.version);
                    policy = void 0;
                    if (!(policyLocations.length > 0)) return [3 /*break*/, 8];
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, snyk.policy.load(policyLocations, options)];
                case 6:
                    policy = _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    err_1 = _a.sent();
                    // note: inline catch, to handle error from .load
                    //   if the .snyk file wasn't found, it is fine
                    if (err_1.code !== 'ENOENT') {
                        throw err_1;
                    }
                    return [3 /*break*/, 8];
                case 8:
                    payload = {
                        method: 'POST',
                        url: config.API + '/test-dep-graph',
                        json: true,
                        headers: {
                            'x-is-ci': isCI,
                            'authorization': 'token ' + snyk.api,
                        },
                        qs: common.assembleQueryString(options),
                        body: {
                            depGraph: depGraph,
                            targetFile: pkg.targetFile || options.file,
                            projectNameOverride: options.projectName,
                            policy: policy && policy.toString(),
                            docker: pkg.docker,
                        },
                    };
                    return [2 /*return*/, payload];
                case 9:
                    spinner.clear(spinnerLbl)();
                    return [7 /*endfinally*/];
                case 10: return [2 /*return*/];
            }
        });
    });
}
function assembleRemotePayload(root, options) {
    return __awaiter(this, void 0, void 0, function () {
        var pkg, encodedName, payload;
        return __generator(this, function (_a) {
            pkg = moduleToObject(root);
            debug('testing remote: %s', pkg.name + '@' + pkg.version);
            analytics.add('packageName', pkg.name);
            analytics.add('packageVersion', pkg.version);
            analytics.add('packageManager', options.packageManager);
            analytics.add('package', pkg.name + '@' + pkg.version);
            encodedName = encodeURIComponent(pkg.name + '@' + pkg.version);
            payload = {
                method: 'GET',
                url: config.API + "/vuln/" + options.packageManager + "/" + encodedName,
                json: true,
                headers: {
                    'x-is-ci': isCI,
                    'authorization': 'token ' + snyk.api,
                },
            };
            payload.qs = common.assembleQueryString(options);
            return [2 /*return*/, payload];
        });
    });
}
module.exports = runTest;
//# sourceMappingURL=run-test.js.map